// src/app/teacher/page.js
"use client";
import { useEffect, useState } from "react";
import {
  Box,
  Typography,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Button,
  Alert,
} from "@mui/material";
import {
  Home as HomeIcon,
  EventNote as EventNoteIcon,
  ContactsOutlined,
} from "@mui/icons-material";
import { useRouter } from "next/navigation";
import Link from "next/link";

export default function TeacherPage() {
  const [menuOption, setMenuOption] = useState("home");
  const [teacherInfo, setTeacherInfo] = useState(null);
  const [activeSession, setActiveSession] = useState(null);
  const [showSuccess, setShowSuccess] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (!token) router.push("/login");
    else {
      fetchTeacherData(token);
      checkAndUpdateActiveSession(token);
    }
  }, []);

  // ÿ¨ŸÑÿ® ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿπŸÑŸÖ ŸÖÿπ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇŸàŸÑ
  const fetchTeacherData = async (token) => {
    try {
      const response = await fetch(
        "http://localhost:1337/api/users/me?populate=role", // ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿØŸàÿ±
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      const data = await response.json();
      setTeacherInfo(data);
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration des donn√©es:", error);
    }
  };

  // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ¨ŸÑÿ≥ÿ© ÿßŸÑŸÜÿ¥ÿ∑ÿ© Ÿàÿ™ÿ≥ÿ¨ŸäŸÑ ŸàŸÇÿ™ ÿßŸÑÿ≠ÿ∂Ÿàÿ±
  const checkAndUpdateActiveSession = async (token) => {
    try {
      const now = new Date();
      const today = now.toISOString().split("T")[0];
      const currentTime = now.toTimeString().split(" ")[0];
      console.log(now);
      // ÿ™ÿ≠ÿØŸäÿ´ ŸÖÿπŸÑŸÖÿ© populate ŸÑÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿπŸÑÿßŸÇÿ© ŸÖÿπ cour ÿ®ÿ¥ŸÉŸÑ ÿµÿ≠Ÿäÿ≠
      const response = await fetch(
        `http://localhost:1337/api/seances?filters[date][$eq]=${today}&populate[cour][populate][0]=cour_contant`, // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ populate=cour
        { headers: { Authorization: `Bearer ${token}` } }
      );
      const data = await response.json();
      console.log("Donn√©es des sessions:", data);

      if (data.error) {
        console.error("Erreur Strapi:", data.error);
        return;
      }

      // ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑÿ¨ŸÑÿ≥ÿ© ÿßŸÑŸÜÿ¥ÿ∑ÿ©
      const session = data.data.find((s) => {
        const startTime = new Date(`${s.date}T${s.start_time}`);
        const endTime = new Date(`${s.date}T${s.end_time}`);
        return now >= startTime && now <= endTime;
      });
      console.log(now.toISOString().split("T")[1].split("Z")[0]);

      if (session) {
        setActiveSession(session);

        // ÿ™ŸÜÿ≥ŸäŸÇ ÿßŸÑŸàŸÇÿ™ ŸÑŸÄ time_presence (HH:mm)
        const formattedTime = now.toISOString().split("T")[1].split("Z")[0];

        // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ¨ŸÑÿ≥ÿ© ŸÖÿπ ÿ™ÿ≥ÿ¨ŸäŸÑ ŸàŸÇÿ™ ÿßŸÑÿ≠ÿ∂Ÿàÿ±
        const updateResponse = await fetch(
          `http://localhost:1337/api/seances/${session.documentId}`,
          {
            method: "PUT",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              data: {
                time_presence: formattedTime,
              },
            }),
          }
        );
        const updateData = await updateResponse.json();

        if (updateResponse.ok) {
          setShowSuccess(true);
          console.log(updateData);
          console.log("Pr√©sence enregistr√©e avec succ√®s!");
        } else {
          console.error(
            "Erreur lors de la mise √† jour:",
            updateResponse.statusText
          );
        }
      }
    } catch (error) {
      console.error("Erreur globale:", error);
    }
  };

  return (
    <Box sx={{ display: "flex", minHeight: "100vh" }}>
      {/* ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ¨ÿßŸÜÿ®Ÿäÿ© */}
      <Box
        sx={{
          width: 280,
          backgroundColor: "#2E3B55",
          color: "white",
          boxShadow: "2px 0 5px rgba(0,0,0,0.1)",
          position: "fixed",
          left: 0,
          top: 0,
          bottom: 0,
        }}
      >
        <Typography
          variant="h5"
          sx={{
            textAlign: "center",
            mt: 3,
            mb: 4,
            fontWeight: "bold",
            color: "#BBDEFB",
          }}
        >
          Tableau de bord
        </Typography>
        <List>
          <ListItem
            button={`true`}
            selected={menuOption === "home"}
            onClick={() => setMenuOption("home")}
            sx={{
              "&.Mui-selected": { backgroundColor: "#42A5F5" },
              borderRadius: "8px",
              mx: 2,
              mb: 1,
            }}
          >
            <ListItemIcon sx={{ color: "white" }}>
              <HomeIcon />
            </ListItemIcon>
            <ListItemText primary="Accueil" />
          </ListItem>
          <ListItem
            button={`true`}
            selected={menuOption === "seance"}
            onClick={() => setMenuOption("seance")}
            sx={{
              "&.Mui-selected": { backgroundColor: "#42A5F5" },
              borderRadius: "8px",
              mx: 2,
              mb: 1,
            }}
          >
            <ListItemIcon sx={{ color: "white" }}>
              <EventNoteIcon />
            </ListItemIcon>
            <ListItemText primary="S√©ances" />
          </ListItem>
        </List>
      </Box>

      {/* ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä */}
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          p: 4,
          ml: "280px",
          backgroundColor: "#F5F5F5",
          minHeight: "100vh",
        }}
      >
        {/* ÿµŸÅÿ≠ÿ© "ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©" */}
        {menuOption === "home" && teacherInfo && (
          <Paper
            elevation={3}
            sx={{
              p: 4,
              borderRadius: "16px",
              backgroundColor: "#FFFFFF",
              mb: 4,
            }}
          >
            <Typography variant="h4" sx={{ mb: 3, color: "#2E3B55" }}>
              Informations Personnelles
            </Typography>
            <Box sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
              <Typography>
                <strong>Nom d'utilisateur:</strong> {teacherInfo.username}
              </Typography>
              <Typography>
                <strong>Email:</strong> {teacherInfo.email}
              </Typography>
              <Typography>
                <strong>R√¥le:</strong>{" "}
                {teacherInfo.role?.name || "Non sp√©cifi√©"}
              </Typography>
              <Typography>
                <strong>Date de cr√©ation:</strong>{" "}
                {new Date(teacherInfo.createdAt).toLocaleDateString("fr-FR")}
              </Typography>
              <Typography>
                <strong>Derni√®re mise √† jour:</strong>{" "}
                {new Date(teacherInfo.updatedAt).toLocaleDateString("fr-FR")}
              </Typography>
            </Box>
          </Paper>
        )}

        {/* ÿµŸÅÿ≠ÿ© "ÿßŸÑÿ¨ŸÑÿ≥ÿßÿ™" */}
        {menuOption === "seance" && (
          <Box>
            <Typography variant="h4" sx={{ mb: 4, color: "#2E3B55" }}>
              S√©ance Active
            </Typography>
            {showSuccess && (
              <Alert severity="success" sx={{ mb: 4 }}>
                Votre pr√©sence a √©t√© enregistr√©e avec succ√®s!
              </Alert>
            )}
            {activeSession ? (
              <TableContainer component={Paper}>
                <Table>
                  <TableHead sx={{ backgroundColor: "#2E3B55" }}>
                    <TableRow>
                      <TableCell sx={{ color: "white" }}>Date</TableCell>
                      <TableCell sx={{ color: "white" }}>
                        Heure de d√©but
                      </TableCell>
                      <TableCell sx={{ color: "white" }}>
                        Heure de fin
                      </TableCell>
                      <TableCell sx={{ color: "white" }}>Mati√®re</TableCell>
                      <TableCell sx={{ color: "white" }}>
                        Document de mati√®re
                      </TableCell>
                      <TableCell sx={{ color: "white" }}>Pr√©sence</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    <TableRow>
                      <TableCell>
                        {new Date(activeSession.date).toLocaleDateString(
                          "fr-FR"
                        )}
                      </TableCell>
                      <TableCell>{activeSession.start_time}</TableCell>
                      <TableCell>{activeSession.end_time}</TableCell>
                      <TableCell>
                        {activeSession.cour?.title || "Mati√®re non trouv√©e"}
                      </TableCell>
                      <TableCell>
                        <Link
                          href={`http://localhost:1337/${activeSession.cour.cour_contant.url}`}
                          target="_blank"
                          rel="noopener noreferrer"
                        >
                          üìÑ T√©l√©charger : {activeSession.cour.title}
                        </Link>
                      </TableCell>
                      <TableCell>
                        {activeSession.time_presence
                          ? activeSession.time_presence
                          : "Non enregistr√©e"}
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </TableContainer>
            ) : (
              <Alert severity="info">Aucune s√©ance active trouv√©e.</Alert>
            )}
          </Box>
        )}
      </Box>
    </Box>
  );
}
