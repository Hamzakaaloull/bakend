// src/app/teacher/page.js
"use client";
import { useEffect, useState } from "react";
import {
  Box,
  Typography,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Alert,
  Skeleton,
  Fade,
  Slide,
  Collapse,
  IconButton,
  Menu,
  MenuItem,
  Avatar,
  Drawer,
  Breadcrumbs,
  Link as MuiLink,
  Tooltip,
  useTheme,
  useMediaQuery,
} from "@mui/material";
import {
  Home as HomeIcon,
  EventNote as EventNoteIcon,
  AccountCircle as AccountCircleIcon,
  Close as CloseIcon,
  Settings as SettingsIcon,
  Logout as LogoutIcon,
  NavigateNext as NavigateNextIcon,
  Lock as LockIcon,
  Menu as MenuIcon,
  Notifications as NotificationsIcon,
} from "@mui/icons-material";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { createTheme, ThemeProvider } from "@mui/material/styles";

const theme = createTheme({
  palette: {
    primary: {
      main: "#0000",
      contrastText: "#fff",
    },
    secondary: {
      main: "#009688",
    },
    background: {
      default: "#F5F5F5",
      paper: "#FFFFFF",
    },
    success: {
      main: "#4CAF50",
      light: "#E8F5E9",
    },
    info: {
      main: "#2196F3",
      light: "#E3F2FD",
    },
  },
  typography: {
    fontFamily: "Poppins, sans-serif",
    h4: { fontWeight: 600 },
    h5: { fontWeight: 500 },
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: 12,
          textTransform: "none",
          boxShadow: "none",
          "&:hover": { boxShadow: "0 2px 8px rgba(0,0,0,0.1)" },
        },
      },
    },
    MuiTableCell: {
      styleOverrides: {
        head: {
          fontWeight: 600,
          backgroundColor: "#F5F5F5",
        },
      },
    },
  },
});

export default function TeacherPage() {
  const [menuOption, setMenuOption] = useState("home");
  const [teacherInfo, setTeacherInfo] = useState(null);
  const [activeSession, setActiveSession] = useState(null);
  const [showSuccess, setShowSuccess] = useState(false);
  const [loadingTeacher, setLoadingTeacher] = useState(true);
  const [loadingSession, setLoadingSession] = useState(true);
  const [collapseOpen, setCollapseOpen] = useState(true);
  const [anchorEl, setAnchorEl] = useState(null);
  const [settingsOpen, setSettingsOpen] = useState(false);
  const [mobileOpen, setMobileOpen] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (!token) router.push("/login");
    else {
      fetchTeacherData(token);
      checkAndUpdateActiveSession(token);
    }
  }, []);

  const fetchTeacherData = async (token) => {
    setLoadingTeacher(true);
    try {
      const res = await fetch(
        "http://localhost:1337/api/users/me?populate[imgProfile]=*&populate[role]=*",
        { headers: { Authorization: `Bearer ${token}` } }
      );
      const data = await res.json();
      setTeacherInfo(data);
    } catch (err) {
      console.error(err);
    } finally {
      setLoadingTeacher(false);
    }
  };

  const checkAndUpdateActiveSession = async (token) => {
    setLoadingSession(true);
    try {
      const now = new Date();
      const today = now.toLocaleDateString("fr-CA");
      const res = await fetch(
        `http://localhost:1337/api/seances?filters[date][$eq]=${today}&populate[cour][populate][0]=cour_contant`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      const data = await res.json();
      if (!data.error) {
        const session = data.data.find((s) => {
          const start = new Date(`${s.date}T${s.start_time}`);
          const end = new Date(`${s.date}T${s.end_time}`);
          return now >= start && now <= end;
        });
        if (session) {
          setActiveSession(session);
          const formattedTime = now.toISOString().split("T")[1].split("Z")[0];
          const upd = await fetch(
            `http://localhost:1337/api/seances/${session.documentId}`,
            {
              method: "PUT",
              headers: {
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ data: { time_presence: formattedTime } }),
            }
          );
          if (upd.ok) setShowSuccess(true);
        }
      }
    } catch (err) {
      console.error(err);
    } finally {
      setLoadingSession(false);
    }
  };

  const handleMenuOpen = (e) => setAnchorEl(e.currentTarget);
  const handleMenuClose = () => setAnchorEl(null);
  const handleLogout = () => {
    localStorage.removeItem("token");
    router.push("/login");
  };
  const handleSettingsOpen = () => {
    setAnchorEl(null);
    setSettingsOpen(true);
  };
  const handleSettingsClose = () => setSettingsOpen(false);

  const avatarUrl =
    teacherInfo?.imgProfile?.url &&
    `http://localhost:1337${teacherInfo.imgProfile.url}`;

  return (
    <ThemeProvider theme={theme}>
      <Box sx={{ display: "flex" }}>
        {/* Sidebar */}
        <Box
          sx={{
            width: { xs: 0, md: 280 },
            bgcolor: "linear-gradient(180deg, #E3F2FD 0%, #BBDEFB 100%)",
            color: "#2E3B55",
            boxShadow: "2px 0 10px rgba(0,0,0,0.1)",
            position: "fixed",
            height: "100vh",
            display: "flex",
            flexDirection: "column",
            alignItems: "flex-start",
            padding: "24px",
            transition: "all 0.3s ease",
            zIndex: 1000,
          }}
        >
          <Typography
            variant="h5"
            sx={{
              mb: 4,
              fontWeight: 700,
              color: "#2E3B55",
              display: "flex",
              alignItems: "center",
              gap: 1,
            }}
          >
            Edu<span style={{ color: "#2196F3" }}>Pro</span>
            <Tooltip title="Paramètres">
              <IconButton
                sx={{
                  ml: "auto",
                  color: "#2E3B55",
                  display: { xs: "none", md: "inline-flex" },
                }}
                onClick={handleSettingsOpen}
              >
                <SettingsIcon />
              </IconButton>
            </Tooltip>
          </Typography>

          <List sx={{ flexGrow: 1, width: "100%" }}>
            {[
              { key: "home", icon: <HomeIcon />, label: "Accueil" },
              { key: "seance", icon: <EventNoteIcon />, label: "Séances" },
            ].map(({ key, icon, label }) => (
              <ListItem
                button
                key={key}
                selected={menuOption === key}
                onClick={() => setMenuOption(key)}
                sx={{
                  borderRadius: 3,
                  mb: 1,
                  "&.Mui-selected": {
                    bgcolor: "rgba(33, 150, 243, 0.1)",
                    "&:hover": { bgcolor: "rgba(33, 150, 243, 0.2)" },
                  },
                  "&:hover": { bgcolor: "rgba(33, 150, 243, 0.05)" },
                }}
              >
                <ListItemIcon sx={{ color: "#2E3B55" }}>{icon}</ListItemIcon>
                <ListItemText primary={label} />
              </ListItem>
            ))}
          </List>

          <Typography variant="caption" sx={{ mt: "auto", color: "#546E7A" }}>
            Version 2.3.1
          </Typography>
        </Box>

        {/* Main Content */}
        <Box
          component="main"
          sx={{
            flexGrow: 1,
            ml: { xs: 0, md: "280px" },
            p: { xs: 2, md: 4 },
            transition: "margin-left 0.3s ease",
            minHeight: "100vh",
            bgcolor: "background.default",
            position: "relative",
          }}
        >
          {/* Top Bar */}
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              mb: 4,
              p: 2,
              bgcolor: "white",
              borderRadius: 2,
              boxShadow: "0 2px 6px rgba(0,0,0,0.05)",
              position: "sticky",
              top: 0,
              zIndex: 100,
            }}
          >
            <IconButton
              sx={{ display: { md: "none" }, mr: 2 }}
              onClick={() => setMobileOpen(!mobileOpen)}
            >
              <MenuIcon />
            </IconButton>

            <Breadcrumbs
              separator={<NavigateNextIcon fontSize="small" />}
              aria-label="breadcrumb"
            >
              <MuiLink
                underline="hover"
                color="text.primary"
                href="/"
                sx={{ fontWeight: 600 }}
              >
                Accueil
              </MuiLink>
              <Typography color="text.secondary">{menuOption}</Typography>
            </Breadcrumbs>

            <Box sx={{ display: "flex", alignItems: "center" }}>
              <Tooltip title="Se déconnecter">
                <IconButton onClick={handleLogout} sx={{ ml: 2 }}>
                  <LogoutIcon sx={{ color: "#546E7A" }} />
                </IconButton>
              </Tooltip>
              <Tooltip title="Paramètres">
                <IconButton onClick={handleSettingsOpen} sx={{ ml: 2 }}>
                  <SettingsIcon sx={{ color: "#546E7A" }} />
                </IconButton>
              </Tooltip>
              <Tooltip title={teacherInfo?.username || "Profile"}>
                <IconButton onClick={handleMenuOpen}>
                  {avatarUrl ? (
                    <Avatar
                      src={avatarUrl}
                      sx={{
                        width: 40,
                        height: 40,
                        border: "2px solid #2196F3",
                        bgcolor: "secondary.main",
                      }}
                    />
                  ) : (
                    <AccountCircleIcon
                      fontSize="large"
                      sx={{ color: "#2E3B55" }}
                    />
                  )}
                </IconButton>
              </Tooltip>
            </Box>
          </Box>

          {/* Home Section */}
          {menuOption === "home" && (
            <Fade in={!loadingTeacher} timeout={600}>
              <Paper
                elevation={3}
                sx={{
                  p: 4,
                  mb: 4,
                  borderRadius: 3,
                  border: "1px solid #E0E0E0",
                  boxShadow: "0 4px 12px rgba(0,0,0,0.05)",
                }}
              >
                {loadingTeacher ? (
                  <>
                    <Skeleton variant="text" width="40%" height={40} />
                    {[...Array(5)].map((_, i) => (
                      <Skeleton key={i} variant="text" height={30} />
                    ))}
                  </>
                ) : (
                  <Box>
                    <Typography
                      variant="h4"
                      sx={{ mb: 3, color: "#2E3B55", fontWeight: 600 }}
                    >
                      Informations Personnelles
                    </Typography>
                    <Box
                      sx={{
                        display: "grid",
                        gridTemplateColumns: "1fr 1fr",
                        gap: 3,
                      }}
                    >
                      <InfoCard
                        label="Nom d'utilisateur"
                        value={teacherInfo.username}
                      />
                      <InfoCard label="Email" value={teacherInfo.email} />
                      <InfoCard label="Rôle" value={teacherInfo.role?.name} />
                      <InfoCard
                        label="Date de création"
                        value={new Date(
                          teacherInfo.createdAt
                        ).toLocaleDateString("fr-FR")}
                      />
                      <InfoCard
                        label="Dernière mise à jour"
                        value={new Date(
                          teacherInfo.updatedAt
                        ).toLocaleDateString("fr-FR")}
                      />
                    </Box>
                  </Box>
                )}
              </Paper>
            </Fade>
          )}

          {/* Sessions Section */}
          {menuOption === "seance" && (
            <Box>
              <Typography
                variant="h4"
                sx={{
                  mb: 4,
                  color: "#2E3B55",
                  fontWeight: 600,
                  display: "flex",
                  alignItems: "center",
                  gap: 1,
                }}
              >
                <EventNoteIcon sx={{ color: "#009688" }} />
                Séance Active
              </Typography>

              <Collapse in={collapseOpen}>
                <Alert
                  severity="success"
                  sx={{
                    bgcolor: "success.light",
                    borderLeft: "4px solid #4CAF50",
                    mb: 4,
                  }}
                  action={
                    <IconButton
                      aria-label="close"
                      color="inherit"
                      size="small"
                      onClick={() => setCollapseOpen(false)}
                    >
                      <CloseIcon fontSize="inherit" />
                    </IconButton>
                  }
                >
                  Votre présence a été enregistrée avec succès!
                </Alert>
              </Collapse>

              {loadingSession ? (
                <Skeleton variant="rectangular" height={200} />
              ) : activeSession ? (
                <Slide in timeout={600}>
                  <TableContainer
                    component={Paper}
                    elevation={0}
                    sx={{
                      borderRadius: 3,
                      border: "1px solid #E0E0E0",
                      bgcolor: "white",
                      boxShadow: "0 2px 8px rgba(0,0,0,0.05)",
                    }}
                  >
                    <Table>
                      <TableHead>
                        <TableRow>
                          {[
                            "Date",
                            "Heure de début",
                            "Heure de fin",
                            "Matière",
                            "Document",
                            "Présence",
                          ].map((head) => (
                            <TableCell
                              key={head}
                              sx={{
                                fontWeight: 600,
                                borderBottom: "2px solid #E0E0E0",
                              }}
                            >
                              {head}
                            </TableCell>
                          ))}
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        <TableRow
                          hover
                          sx={{
                            "&:hover": {
                              bgcolor: "#F0F9FF",
                              cursor: "pointer",
                              transition: "all 0.2s ease",
                            },
                          }}
                        >
                          <TableCell>
                            {new Date(activeSession.date).toLocaleDateString(
                              "fr-FR"
                            )}
                          </TableCell>
                          <TableCell>{activeSession.start_time}</TableCell>
                          <TableCell>{activeSession.end_time}</TableCell>
                          <TableCell>
                            {activeSession.cour?.title || "Matière non trouvée"}
                          </TableCell>
                          <TableCell>
                            {Array.isArray(activeSession.cour?.cour_contant) &&
                            activeSession.cour.cour_contant.length > 0 ? (
                              <Box
                                sx={{
                                  display: "flex",
                                  gap: 1,
                                  flexWrap: "wrap",
                                }}
                              >
                                {activeSession.cour.cour_contant.map(
                                  (file, index) => (
                                    <MuiLink
                                      key={index}
                                      href={`http://localhost:1337${file.url}`}
                                      target="_blank"
                                      rel="noopener noreferrer"
                                      sx={{
                                        textDecoration: "none",
                                        color: "#1565C0",
                                        bgcolor: "#E3F2FD",
                                        px: 2,
                                        py: 0.5,
                                        borderRadius: 2,
                                        display: "inline-block",
                                        transition: "transform 0.2s ease",
                                        "&:hover": {
                                          transform: "translateY(-2px)",
                                          boxShadow:
                                            "0 2px 4px rgba(0,0,0,0.1)",
                                        },
                                      }}
                                    >
                                      📎 {file.name}
                                    </MuiLink>
                                  )
                                )}
                              </Box>
                            ) : (
                              <Typography
                                variant="body2"
                                color="text.secondary"
                                fontStyle="italic"
                              >
                                Aucun document trouvé.
                              </Typography>
                            )}
                          </TableCell>
                          <TableCell>
                            {activeSession.time_presence || "Non enregistrée"}
                          </TableCell>
                        </TableRow>
                      </TableBody>
                    </Table>
                  </TableContainer>
                </Slide>
              ) : (
                <Alert
                  severity="info"
                  sx={{
                    bgcolor: "info.light",
                    borderLeft: "4px solid #2196F3",
                    mb: 4,
                  }}
                >
                  Aucune séance active trouvée.
                </Alert>
              )}
            </Box>
          )}
        </Box>

        {/* Settings Drawer */}
        <Drawer
          anchor="right"
          open={settingsOpen}
          onClose={handleSettingsClose}
          PaperProps={{
            sx: {
              width: 320,
              bgcolor: "background.paper",
              borderLeft: "2px solid #E0E0E0",
            },
          }}
        >
          <Box sx={{ p: 4 }}>
            <Typography variant="h5" sx={{ mb: 4, color: "#2E3B55" }}>
              Paramètres du compte
            </Typography>
            <List sx={{ bgcolor: "white", borderRadius: 2, boxShadow: 1 }}>
              <ListItem
                button
                sx={{
                  px: 3,
                  py: 2,
                  borderRadius: 1,
                  "&:hover": { bgcolor: "#F0F9FF" },
                }}
              >
                <ListItemIcon>
                  <AccountCircleIcon sx={{ color: "#2196F3" }} />
                </ListItemIcon>
                <ListItemText primary="Profil" />
              </ListItem>
              <ListItem
                button
                sx={{
                  px: 3,
                  py: 2,
                  borderRadius: 1,
                  "&:hover": { bgcolor: "#F0F9FF" },
                }}
              >
                <ListItemIcon>
                  <LockIcon sx={{ color: "#009688" }} />
                </ListItemIcon>
                <ListItemText primary="Changer mot de passe" />
              </ListItem>
              <ListItem
                button
                sx={{
                  px: 3,
                  py: 2,
                  borderRadius: 1,
                  "&:hover": { bgcolor: "#F0F9FF" },
                }}
              >
                <ListItemIcon>
                  <NotificationsIcon sx={{ color: "#FF9800" }} />
                </ListItemIcon>
                <ListItemText primary="Notifications" />
              </ListItem>
            </List>
          </Box>
        </Drawer>
      </Box>
    </ThemeProvider>
  );
}

// InfoCard Component
function InfoCard({ label, value }) {
  return (
    <Box
      sx={{
        p: 3,
        bgcolor: "white",
        borderRadius: 2,
        boxShadow: "0 2px 6px rgba(0,0,0,0.05)",
        transition: "transform 0.2s ease",
        "&:hover": { transform: "translateY(-2px)" },
      }}
    >
      <Typography variant="subtitle2" color="text.secondary" gutterBottom>
        {label}
      </Typography>
      <Typography variant="h6" sx={{ color: "#2E3B55", fontWeight: 600 }}>
        {value}
      </Typography>
    </Box>
  );
}
